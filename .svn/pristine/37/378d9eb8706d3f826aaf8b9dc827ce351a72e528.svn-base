from django.contrib.auth.decorators import login_required
from django.core.checks import messages
from django.shortcuts import render_to_response
from django.template.context import RequestContext
from django.http import HttpResponse, HttpResponseRedirect
from django.contrib.auth.models import User
from django.template import RequestContext
import simplejson as simplejson
from django.db.models import Count, Q

from TalkDoc.forms import *

from TalkDoc.models import *
from login.models import *


@login_required
def home(request):
    try:
        user = UserExtended.objects.get(user=request.user)
    except UserExtended.DoesNotExist:
        messages.error(request, "User does not exist.")

    return render_to_response('talkdoc/home.html', {'user': user, })



@login_required
def edit_profile(request):

    try:
        user = UserExtended.objects.get(user=request.user)
    except UserExtended.DoesNotExist:
        messages.error(request, "User does not exist.")

    try:
        user_profile = UserProfile.objects.get(user=request.user)
    except UserProfile.DoesNotExist:
        user_profile = ''

    if request.method == 'POST':
        if user_profile:
            form = UserProfileForm(request.POST, request.FILES, instance=user_profile)
        else:
            form = UserProfileForm(request.POST, request.FILES)

        if form.is_valid():
            userProfile = form.save(commit=False)
            userProfile.user = request.user
            userProfile.save()
            form.save_m2m()

            user_profile = userProfile
    else:
        if user_profile:
            form = UserProfileForm(instance=user_profile)
        else:
            form = UserProfileForm()

    return render_to_response('talkdoc/editProfile.html', {'form': form, 'user': user,'user_profile':user_profile},
                              context_instance=RequestContext(request))


@login_required
def user_profile(request):
    return render_to_response('talkdoc/userProfile.html', {'user': request.user, })


@login_required
def search_results(request):
    user_list = []

    try:
        user = UserExtended.objects.get(user=request.user)
    except UserExtended.DoesNotExist:
        messages.error(request, "User does not exist.")

    users = UserExtended.objects.filter(user_type__user_type='Doctor')
    user_list = get_user_list(users)
    return render_to_response('talkdoc/searchResults.html',
                              {
                                  'user': user,
                                  'user_list':simplejson.dumps(user_list),
                               })


def main_search(request):
    q_objs = []

    user_name = request.GET.get("user_name", "")
    if user_name:
        q_objs.append(Q(first_name=user_name))

    users_list = UserProfile.objects.filter(*q_objs)

    print users_list
    return HttpResponseRedirect("/")



#Private Methods

def get_user_list(users):
    user_list = []

    for u in users:
        try:
            obj = UserProfile.objects.get(user=u.user)
            if obj.first_name not in user_list:
                user_list.append(str(obj.first_name))
        except UserProfile.DoesNotExist:
            pass

    return user_list

@login_required
def appointments_reviews(request):
    try:
        user = UserExtended.objects.get(user=request.user)
    except UserExtended.DoesNotExist:
        messages.error(request, "User does not exist.")

    return render_to_response('talkdoc/appointments_reviews.html', {'user': user, })