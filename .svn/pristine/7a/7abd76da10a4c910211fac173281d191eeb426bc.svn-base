from django.contrib.auth.decorators import login_required
from django.core.checks import messages
from django.contrib import messages
from django.shortcuts import render_to_response
from django.template.context import RequestContext
from django.http import HttpResponse, HttpResponseRedirect
from django.contrib.auth.models import User
from django.template import RequestContext
import simplejson as simplejson
from django.db.models import Count, Q
from django.core.urlresolvers import reverse
from datetime import datetime, timedelta
from time import  time
from django.views.decorators.csrf import csrf_exempt
from TalkDoc.forms import *

from TalkDoc.models import *
from login.models import *


#Home
@login_required
def home(request):
    try:
        user = UserExtended.objects.get(user=request.user)
    except UserExtended.DoesNotExist:
        messages.error(request, "User does not exist.")

    return render_to_response('talkdoc/home.html', {'user': user, })



@login_required
def edit_profile(request):

    try:
        user = UserExtended.objects.get(user=request.user)
    except UserExtended.DoesNotExist:
        messages.error(request, "User does not exist.")

    try:
        user_profile = UserProfile.objects.get(user=request.user)
    except UserProfile.DoesNotExist:
        user_profile = ''

    if request.method == 'POST':
        if user_profile:
            form = UserProfileForm(request.POST, request.FILES, instance=user_profile)
        else:
            form = UserProfileForm(request.POST, request.FILES)
        if form.is_valid():
            userProfile = form.save(commit=False)
            userProfile.user = request.user
            userProfile.save()
            form.save_m2m()

            user_profile = userProfile
            # if user.user_type.user_type == 'Doctor':
            #     return HttpResponseRedirect(reverse('availability_settings'))

    else:
        if user_profile:
            form = UserProfileForm(instance=user_profile)
        else:
            form = UserProfileForm()

    return render_to_response('talkdoc/editProfile.html', {'form': form, 'user': user,'user_profile':user_profile},
                              context_instance=RequestContext(request))


#User Profile
@login_required
def user_profile(request):
    return render_to_response('talkdoc/userProfile.html', {'user': request.user, }, context_instance=RequestContext(request))


#Main Search
@login_required
def main_search(request, u_type=None):
    user_list = []
    q_objs = []
    searched_users = ''

    try:
        user = UserExtended.objects.get(user=request.user)
    except UserExtended.DoesNotExist:
        messages.error(request, "User does not exist.")

    user_list = get_user_list(u_type)
    specialities = Speciality.objects.all()
    services = ServiceOffered.objects.all()
    cities = City.objects.all()

    user_name = request.GET.get("user_name", "")
    specialilty = request.GET.get("specialilty", "")
    city = request.GET.get("city", "")

    if user_name:
        q_objs.append(Q(first_name=user_name))
    if specialilty:
        q_objs.append(Q(speciality__id=specialilty))
    if city:
        q_objs.append(Q(city__id=city))

    if q_objs:
        searched_users = UserProfile.objects.filter(*q_objs)

    return render_to_response('talkdoc/searchResults.html',
                              {
                                  'user': user,
                                  'user_type': u_type,
                                  'user_list': simplejson.dumps(user_list),
                                  'specialities': specialities,
                                  'services': services,
                                  'cities': cities,
                                  'searched_users': searched_users,
                               }, context_instance=RequestContext(request))


# #Search Results
# @login_required
# def search_results(request, u_type=None):
#     q_objs = []
#     searched_users = ''
#
#     try:
#         user = UserExtended.objects.get(user=request.user)
#     except UserExtended.DoesNotExist:
#         messages.error(request, "User does not exist.")
#
#     user_list = get_user_list(u_type)
#
#
#     user_name = request.GET.get("user_name", "")
#     if user_name:
#         q_objs.append(Q(first_name=user_name))
#
#     if q_objs:
#         searched_users = UserProfile.objects.filter(*q_objs)
#
#     return render_to_response('talkdoc/searchResults.html',
#                               {
#                                   'user': user,
#                                   'user_type': u_type,
#                                   'user_list': simplejson.dumps(user_list),
#                                   'searched_users':searched_users,
#                                })



#Availablility Settings
@login_required
def availability_settings(request, id=None):
    avail_id=0

    try:
        user = UserExtended.objects.get(user=request.user)
    except UserExtended.DoesNotExist:
        messages.error(request, "User does not exist.")

    try:
        profile_obj = UserProfile.objects.get(user=request.user)
    except UserProfile.DoesNotExist:
        pass

    if request.method == 'POST':
        try:
            obj = Availability.objects.get(id=id)
            form = AvailabilitySettingsForm(request.POST, request.FILES, instance=obj)
        except Availability.DoesNotExist:
            form = AvailabilitySettingsForm(request.POST, request.FILES)

        if form.is_valid():
            userProfile = form.save(commit=False)
            userProfile.profile = profile_obj
            userProfile.save()
            form = AvailabilitySettingsForm()
            messages.success(request, "Availablity Settings updated successfuly.")
            print ("this is first test")
    else:
        try:
            obj = Availability.objects.get(id=id)
            avail_id = obj.id
            form = AvailabilitySettingsForm(instance=obj)
            messages.success(request, "Availablity Settings updated successfuly.")
            print ("this is second test")
        except Availability.DoesNotExist:
            form = AvailabilitySettingsForm()

    availability_list = Availability.objects.filter(profile=profile_obj, date_deleted__isnull=True)

    return render_to_response('talkdoc/availabilitySettings.html',
                              {
                                  'form': form,
                                  'user': user,
                                  'profile_obj': profile_obj,
                                  'availability_list': availability_list,
                                  'avail_id': avail_id
                               })


#View Profile
@login_required
def view_profile(request, id=None, u_type=None):
    try:
        user = UserExtended.objects.get(user=request.user)
    except UserExtended.DoesNotExist:
        messages.error(request, "User does not exist.")

    try:
        searched_by = UserProfile.objects.get(user=request.user)
    except UserProfile.DoesNotExist:
        pass

    try:
        profile_obj = UserProfile.objects.get(id=id)
    except UserProfile.DoesNotExist:
        pass

    try:
        searched_user = UserExtended.objects.get(user=profile_obj.user)
    except UserExtended.DoesNotExist:
        messages.error(request, "User does not exist.")

    return render_to_response('talkdoc/viewProfile.html',
                              {
                                  'user': user,
                                  'profile_obj': profile_obj,
                                  'searched_by': searched_by,
                                  'searched_to': searched_user,
                               }, context_instance=RequestContext(request))


#Delete Settings
@login_required
def delete_settings(request, id):
    print id
    try:
        obj = Availability.objects.get(id=id, date_deleted__isnull=True)
        obj.date_deleted = datetime.today()
        obj.save()
    except Availability.DoesNotExist:
        messages.success(request, "Tool does not exist.")

    return HttpResponseRedirect(request.META.get('HTTP_REFERER', '/'))



#Booking
@login_required
def book_now(request, id=None):
    profile_obj = ''

    try:
        user = UserExtended.objects.get(user=request.user)
    except UserExtended.DoesNotExist:
        messages.error(request, "User does not exist.")

    try:
        profile_obj = UserProfile.objects.get(id=id)
    except UserProfile.DoesNotExist:
        messages.error(request, "Profile does not exist.")

    visit_types = ServiceOffered.objects.all()

    if request.method == 'POST':
        date = request.POST.get("selected_date", None)
        visitType = request.POST.get("visitType", None)
        selected_time = request.POST.get("availableslots", None)

        start_date = str(date)+' ' + str(selected_time)
        try:
            service_obj = ServiceAvailability.objects.get(service__id=int(visitType), profile__id=id)
        except ServiceAvailability.DoesNotExist:
            pass
        if service_obj:
            counter = 0
            current_start = datetime.strptime(start_date, '%Y-%m-%d %H:%M:%S')

            while counter < int(service_obj.get_duration_display())/15:
                obj = AppointmentBooking()
                obj.appointment_by = request.user
                obj.appointment_to = profile_obj
                obj.service_type = service_obj.service
                obj.start_time = current_start
                obj.end_time = current_start+timedelta(minutes=15)
                obj.save()

                current_start += timedelta(minutes=15)
                counter += 1

    return render_to_response('talkdoc/bookNow.html',
                              {
                                  'user': user,
                                  'visit_types': visit_types,
                                  'profile_obj': profile_obj,
                              },   context_instance=RequestContext(request))

#Get Time Slots
def get_time_slots(request):
    date = request.POST.get("selected_date", None)
    doc_id = request.POST.get("doc_id", None)
    visitType = request.POST.get("visitType", None)
    if request.is_ajax():
        date_obj = datetime.strptime(str(date), '%Y-%m-%d')

        try:
            availability_time = Availability.objects.get(profile__id=doc_id, start_date__gte=date_obj, end_date__lte=date_obj)
        except Availability.DoesNotExist:
            availability_time = ''

        service_obj = ''
        slots = []

        try:
            service_obj = ServiceAvailability.objects.get(service__id=int(visitType), profile__id=doc_id)
        except ServiceAvailability.DoesNotExist:
            pass

        t_start = str(date)+' ' + str(availability_time.start_time)
        t_end = str(date)+' '+ str(availability_time.end_time)

        start = datetime.strptime(t_start, '%Y-%m-%d %H:%M:%S')
        end = datetime.strptime(t_end, '%Y-%m-%d %H:%M:%S')
        temp_end = datetime.strptime(t_start, '%Y-%m-%d %H:%M:%S')+ timedelta(minutes=int(service_obj.get_duration_display()))

        while start < end:
            is_booked = AppointmentBooking.objects.filter(appointment_to__id=doc_id, start_time__gte=start,
                                                           end_time__lte=temp_end)
            if is_booked:
                start += timedelta(minutes=15)
                temp_end += timedelta(minutes=15)
            else:
                if not start + timedelta(minutes=int(service_obj.get_duration_display())) > end:
                    slots.append(str(start.time()))
                start += timedelta(minutes=int(service_obj.get_duration_display()))
                temp_end += timedelta(minutes=int(service_obj.get_duration_display()))
                # temp = start+timedelta(minutes=15)
                # slots.append({'start':start,'end':temp})


        # index = 1
        # i=0
        # dolt = []
        # temmm= ''
        # for x in slots:
        #     if x['end']==slots[index]['start']:
        #         print x['start'],'>>>>>>>>>>>>>>>>>>>>>>>>>>>',x['end']
        #         i+=1
        #         if int(service_obj.get_duration_display())==30:
        #             if i == 2:
        #                 print temp,'...........................',i
        #                 dolt.append(temp)
        #                 i=0
        #                 temp=''
        #             else:
        #                 temp = x['start']
        #     index+=1
        json_stuff = simplejson.dumps({"slots": slots})
        return HttpResponse(json_stuff, content_type="application/json")


#Services Settings
def services_settings(request, id=None):
    service_id = 0
    service = ''

    try:
        user = UserExtended.objects.get(user=request.user)
    except UserExtended.DoesNotExist:
        messages.error(request, "User does not exist.")

    try:
        profile_obj = UserProfile.objects.get(user=request.user)
    except UserProfile.DoesNotExist:
        pass

    if request.method == 'POST':
        duration = request.POST.get('duration', None)
        try:
            obj = ServiceAvailability.objects.get(id=id)
            obj.duration = duration
            obj.save()
        except ServiceAvailability.DoesNotExist:
            pass

    else:
        for s in profile_obj.services_offerd.all():
            try:
                obj = ServiceAvailability.objects.get(service=s, profile=profile_obj)
            except ServiceAvailability.DoesNotExist:
                obj = ServiceAvailability()
                obj.service = ServiceOffered.objects.get(id=s.id)
                obj.profile = profile_obj
                obj.save()

    services_list = ServiceAvailability.objects.filter(profile=profile_obj, date_deleted__isnull=True)

    return render_to_response('talkdoc/servicesSetting.html',
                              {
                                  'user': user,
                                  'profile_obj': profile_obj,
                                  'services_list': services_list
                               })



#Private Methods
def get_user_list(u_type):
    user_list = []

    users = UserExtended.objects.filter(user_type__user_type=u_type)

    for u in users:
        try:
            obj = UserProfile.objects.get(user=u.user)
            if obj.first_name not in user_list:
                user_list.append(str(obj.first_name))
        except UserProfile.DoesNotExist:
            pass

    return user_list


def get_duration(duration):
    if duration == '1':
        return 15
    elif duration == '2':
        return 30
    elif duration == '3':
        return 45
    else:
        return 60

@login_required
def appointments_reviews(request):
    try:
        user = UserExtended.objects.get(user=request.user)
    except UserExtended.DoesNotExist:
        messages.error(request, "User does not exist.")

    return render_to_response('talkdoc/appointments_reviews.html', {'user': user, })